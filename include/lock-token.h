#ifndef _LOCK_TOKEN_H_
#define  _LOCK_TOKEN_H_

#include "tangramfs-rpc.h"

#define LOCK_TYPE_RD        0
#define LOCK_TYPE_WR        1

typedef struct lock_token {
    int block_start;
    int block_end;
    int type;
    tangram_uct_addr_t* owner;
    struct lock_token*  next;
} lock_token_t;

typedef struct lock_token_list {
    pthread_rwlock_t rwlock;
    lock_token_t*    head;
} lock_token_list_t;


lock_token_t* lock_token_find_conflict(lock_token_list_t* token_list, size_t offset, size_t count);
lock_token_t* lock_token_find_cover(lock_token_list_t* token_list, size_t offset, size_t count);
lock_token_t* lock_token_find_exact(lock_token_list_t* token_list, size_t offset, size_t count);


lock_token_t* lock_token_add(lock_token_list_t* token_list, size_t offset, size_t count, int type, tangram_uct_addr_t* client);

// Add a extended lock token
// e.g., user ask [0-100], we can give [0-200] if possible
lock_token_t* lock_token_add_extend(lock_token_list_t* token_list, size_t offset, size_t count, int type, tangram_uct_addr_t* client);

// Add from the data stream generated by lock_token_serialize()
lock_token_t* lock_token_add_from_buf(lock_token_list_t* token_list, void* buf);

void  lock_token_delete(lock_token_list_t* token_list, lock_token_t* token);
// Delete all tokens owned by a specific client
void  lock_token_delete_client(lock_token_list_t* token_list, tangram_uct_addr_t* client);
void* lock_token_serialize(lock_token_t* token_list, size_t *size);


void lock_token_list_init(lock_token_list_t* token_list);
void lock_token_list_destroy(lock_token_list_t* token_list);

#endif
